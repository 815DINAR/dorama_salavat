import VideoPlayerManager from "./managers/VideoPlayerManager.js";
import VideoPreloader from "./managers/VideoPreloader.js";
import VideoManager from "./managers/VideoManager.js";
import WatchTracker from "./managers/WatchTracker.js";
import VideoController from "./controllers/VideoController.js";
import GestureController from "./controllers/GestureController.js";
import UIController from "./controllers/UIController.js";
import DebugLogger from "./utils/DebugLogger.js";

document.addEventListener('DOMContentLoaded', async () => {

  window.debugLogger = new DebugLogger();
  
  console.log('üöÄ DoramaShorts v9.1 - –í–µ—Ä—Å–∏—è —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∑–≤—É–∫–æ–º');
  
  // ===============================
  // –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø
  // ===============================
  
  const authSuccess = await window.telegramAuth.init();
  
  if (!authSuccess) {
    console.error('‚ùå –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å');
    return;
  }
  
  console.log('‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞');
  
  const userData = await window.telegramAuth.getUserData();
  if (userData) {
    console.log('üìä –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã');
  }
   
  // ===============================
  // DEBUG ACCESS
  // ===============================
  
  const setupDebugAccess = async () => {
    const ALLOWED_DEBUG_USERS = ['79046704122', '1062716814', '590563384', '79196982303'];
    
    const getAllPossibleUserIds = () => {
      return {
        'userData.user_id': userData?.user_id,
        'userData.id': userData?.id,
        'telegramAuth.getUserId()': window.telegramAuth?.getUserId?.(),
        'Telegram.WebApp.initDataUnsafe.user.id': window.Telegram?.WebApp?.initDataUnsafe?.user?.id,
        'localStorage.user_id': localStorage.getItem('user_id')
      };
    };
    
    const checkAccess = () => {
      const allIds = getAllPossibleUserIds();
      
      for (const [source, value] of Object.entries(allIds)) {
        if (value !== undefined && value !== null && value !== '') {
          const stringId = String(value);
          
          if (ALLOWED_DEBUG_USERS.includes(stringId)) {
            console.log(`‚úÖ Debug –¥–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω: ${stringId}`);
            return true;
          }
        }
      }
      
      return false;
    };
    
    const hasDebugAccess = checkAccess();
    
    const debugButton = document.getElementById('debugButton');
    
    if (debugButton) {
      if (hasDebugAccess) {
        debugButton.style.display = 'block';
        debugButton.style.visibility = 'visible';
        debugButton.style.opacity = '1';
      } else {
        debugButton.style.display = 'none';
      }
    }
    
    return hasDebugAccess;
  };

  setupDebugAccess();
  
  // ===============================
  // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–û–ù–¢–†–û–õ–õ–ï–†–û–í
  // ===============================
  
  const videoPlayerManager = new VideoPlayerManager();
  const uiController = new UIController(videoPlayerManager);
  const videoController = new VideoController(videoPlayerManager);
  const gestureController = new GestureController(videoController, uiController);
  const videoPreloader = new VideoPreloader(videoPlayerManager);

  const videoManager = new VideoManager(videoPlayerManager, videoPreloader, window.telegramAuth);
  videoManager.initializeFromUserData(userData);

  const watchTracker = new WatchTracker(window.telegramAuth, videoPlayerManager);
  watchTracker.initializeFromUserData(userData);

  window.videoPreloader = videoPreloader;
  window.videoPlayerManager = videoPlayerManager;
  window.videoManager = videoManager;
  window.watchTracker = watchTracker;

  console.log("‚úÖ VideoManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω");

  // ===============================
  // DOM –≠–õ–ï–ú–ï–ù–¢–´
  // ===============================
  
  const videoPlayer = videoPlayerManager.getActivePlayer();
  const videoTitle = document.getElementById('videoTitle');
  const videoGenre = document.getElementById('videoGenre');
  const likeButton = document.getElementById('likeButton');
  const dislikeButton = document.getElementById('dislikeButton');
  const favoriteButton = document.getElementById('favoriteButton');
  const descriptionButton = document.getElementById('descriptionButton');
  const descriptionModal = document.getElementById('descriptionModal');
  const modalClose = document.getElementById('modalClose');
  const modalTitle = document.getElementById('modalTitle');
  const modalDescription = document.getElementById('modalDescription');
  
  const mainTab = document.getElementById('mainTab');
  const favoritesTab = document.getElementById('favoritesTab');
  const mainContent = document.getElementById('mainContent');
  const favoritesContent = document.getElementById('favoritesContent');
  const favoritesList = document.getElementById('favoritesList');
  const favoritesEmpty = document.getElementById('favoritesEmpty');

  // ===============================
  // –û–í–ï–†–õ–ï–ô –ü–ï–†–í–û–ì–û –ö–õ–ò–ö–ê
  // ===============================
  
  let hasFirstClickOccurred = false;
  const firstClickOverlay = document.getElementById('firstClickOverlay');

  function hideFirstClickOverlay() {
      if (!hasFirstClickOccurred && firstClickOverlay) {
          console.log('üéØ –°–∫—Ä—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π');
          
          firstClickOverlay.style.animation = 'fadeOut 0.3s ease-out forwards';
          
          setTimeout(() => {
              firstClickOverlay.classList.add('hidden');
              hasFirstClickOccurred = true;
              window.hasFirstClickOccurred = true;
              console.log('‚úÖ –û–≤–µ—Ä–ª–µ–π —Å–∫—Ä—ã—Ç');
          }, 300);
      }
  }

  if (firstClickOverlay) {
      const handleOverlayClick = (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          console.log('üëÜ –ö–ª–∏–∫ –ø–æ –æ–≤–µ—Ä–ª–µ—é');
          
          hideFirstClickOverlay();
          
          const activePlayer = videoPlayerManager.getActivePlayer();
          if (activePlayer && videoController.currentTab === 'main') {
              // ‚úÖ –í–ö–õ–Æ–ß–ê–ï–ú –ó–í–£–ö –ü–ï–†–ï–î –ó–ê–ü–£–°–ö–û–ú
              activePlayer.muted = false;
              activePlayer.volume = 1.0;
              
              console.log('üîä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∫–ª–∏–∫–µ:', {
                  muted: activePlayer.muted,
                  volume: activePlayer.volume
              });
              
              if (activePlayer.paused) {
                  activePlayer.play().then(() => {
                      console.log('‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —Å–æ –∑–≤—É–∫–æ–º');
                      
                      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–≤—É–∫ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤–∫–ª—é—á–µ–Ω
                      setTimeout(() => {
                          if (activePlayer.muted) {
                              console.warn('‚ö†Ô∏è –ó–≤—É–∫ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –≤–∫–ª—é—á–∞–µ–º –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ');
                              activePlayer.muted = false;
                          }
                          console.log('üîä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞:', {
                              muted: activePlayer.muted,
                              volume: activePlayer.volume,
                              paused: activePlayer.paused
                          });
                      }, 100);
                      
                      const currentVideoId = likeButton?.getAttribute('data-video-id');
                      if (currentVideoId) {
                          startWatchTracking(currentVideoId);
                      }
                  }).catch(error => {
                      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);
                  });
              }
          }
      };
      
      firstClickOverlay.addEventListener('click', handleOverlayClick);
      firstClickOverlay.addEventListener('touchend', handleOverlayClick);
  }
  
  // ===============================
  // –ü–ï–†–ï–ú–ï–ù–ù–´–ï –°–û–°–¢–û–Ø–ù–ò–Ø
  // ===============================
  
  let videos = [];
  let videoOrder = [];
  let currentOrderIndex = 0;
  let userFavorites = userData?.favorites || [];
  let userLikes = userData?.likes || [];
  let userDislikes = userData?.dislikes || [];
  let currentTab = 'main';

  let currentSessionOrder = userData?.currentSessionOrder || [];
  
  let skippedVideosBuffer = [];
  const SKIPPED_BUFFER_SIZE = 10;
  const MIN_VIDEOS_BEFORE_REPEAT = 5;
  
  let lastVideoUpdateTimer = null;
  let sessionOrderUpdateTimer = null;
  
  let isLoadingVideo = false;
  
  window.videos = videos;
  window.videoOrder = videoOrder;
  window.currentOrderIndex = currentOrderIndex;
  window.hasFirstClickOccurred = hasFirstClickOccurred;

  console.log('üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ:', {
    favorites: userFavorites.length,
    likes: userLikes.length,
    dislikes: userDislikes.length,
    watched: watchTracker.getWatchedCount()
  });

  // ===============================
  // –§–£–ù–ö–¶–ò–ò –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–Ø –í–ö–õ–ê–î–û–ö
  // ===============================
  
  function switchTab(tabName) {
    currentTab = tabName;
    videoController.setCurrentTab(tabName);

    if (window.videoManager) {
        videos = window.videoManager.getVideos();
        videoOrder = window.videoManager.getVideoOrder();
        currentOrderIndex = window.videoManager.getCurrentOrderIndex();
    }
    
    if (tabName === 'main') {
      mainTab.classList.add('active');
      favoritesTab.classList.remove('active');
      mainContent.classList.add('active');
      favoritesContent.classList.remove('active');
      
      const activePlayer = videoPlayerManager.getActivePlayer();
      if (activePlayer) {
        if (activePlayer.src) {
          if (hasFirstClickOccurred) {
            // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤—É–∫ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –Ω–∞ –≥–ª–∞–≤–Ω—É—é
            if (activePlayer.muted) {
              console.warn('‚ö†Ô∏è –ó–≤—É–∫ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∞–µ–º');
              activePlayer.muted = false;
              activePlayer.volume = 1.0;
            }
            
            activePlayer.play().catch(error => {
              console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
            });
          }
        } else {
            videoManager.loadVideo(
                videoController,
                updateButtonStates,
                watchTracker,
                videoTitle,
                videoGenre,
                currentTab,
                hasFirstClickOccurred
            );
        }
      }
    } else if (tabName === 'favorites') {
      mainTab.classList.remove('active');
      favoritesTab.classList.add('active');
      mainContent.classList.remove('active');
      favoritesContent.classList.add('active');
      
      const activePlayer = videoPlayerManager.getActivePlayer();
      if (activePlayer && !activePlayer.paused) {
        activePlayer.pause();
      }
      
      updateFavoritesList();
    }
  }
  
  // ===============================
  // –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –í–ö–õ–ê–î–û–ö
  // ===============================
  
  if (mainTab) {
    const handleMainTab = (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (currentTab !== 'main') {
        switchTab('main');
      }
    };
    
    mainTab.addEventListener('click', handleMainTab);
    mainTab.addEventListener('touchstart', (e) => {
      e.preventDefault();
      handleMainTab(e);
    }, { passive: false });
  }
  
  if (favoritesTab) {
    const handleFavoritesTab = (e) => {
      e.preventDefault();
      e.stopPropagation();
      if (currentTab !== 'favorites') {
        switchTab('favorites');
      }
    };
    
    favoritesTab.addEventListener('click', handleFavoritesTab);
    favoritesTab.addEventListener('touchstart', (e) => {
      e.preventDefault();
      handleFavoritesTab(e);
    }, { passive: false });
  }
  
  // ===============================
  // –§–£–ù–ö–¶–ò–ò –ò–ó–ë–†–ê–ù–ù–û–ì–û
  // ===============================

    // –ö–µ—à –¥–ª—è —É–∂–µ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ä—Ç–æ—á–µ–∫
    const favoritesCardsCache = new Map();

    async function updateFavoritesList() {
        const freshUserData = await window.telegramAuth.getUserData();
        if (freshUserData) {
            userFavorites = freshUserData.favorites || [];
        }

        const videosList = (window.videoManager && window.videoManager.getVideos) ? window.videoManager.getVideos() : videos;
        const favoriteVideos = videosList.filter(video =>
            userFavorites.includes(video.filename)
        );

        if (favoriteVideos.length === 0) {
            favoritesEmpty.style.display = 'flex';
            favoritesList.style.display = 'none';
            favoritesList.classList.remove('has-items');
            // –û—á–∏—â–∞–µ–º –∫–µ—à
            favoritesCardsCache.clear();
        } else {
            favoritesEmpty.style.display = 'none';
            favoritesList.style.display = 'grid';
            favoritesList.classList.add('has-items');

            // ‚úÖ –û–ü–¢–ò–ú–ò–ó–ê–¶–ò–Ø: –ù–µ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏, –µ—Å–ª–∏ –æ–Ω–∏ —É–∂–µ –µ—Å—Ç—å
            const currentFilenames = new Set(favoriteVideos.map(v => v.filename));

            // –£–¥–∞–ª—è–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º
            Array.from(favoritesList.children).forEach(card => {
                const filename = card.getAttribute('data-video-filename');
                if (!currentFilenames.has(filename)) {
                    card.remove();
                    favoritesCardsCache.delete(filename);
                }
            });

            // –î–æ–±–∞–≤–ª—è–µ–º/—É–ø–æ—Ä—è–¥–æ—á–∏–≤–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ DOM —Å–æ–≥–ª–∞—Å–Ω–æ –ø–æ—Ä—è–¥–∫—É favoriteVideos
            favoriteVideos.forEach(video => {
                let card = favoritesCardsCache.get(video.filename);
                if (!card) {
                    card = createFavoriteCard(video);
                    favoritesCardsCache.set(video.filename, card);
                    console.log('‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–∞:', video.filename);
                }
                favoritesList.appendChild(card); // appendChild –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —É–∑–µ–ª, –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å
            });
        }
        console.log('‚úÖ updateFavoritesList: found', favoriteVideos.length, 'favoriteVideos. userFavorites count:', userFavorites.length);
    }

    function createFavoriteCard(video) {
        const card = document.createElement('div');
        card.className = 'favorite-card';
        card.setAttribute('data-video-filename', video.filename);

        const thumbnail = document.createElement('div');
        thumbnail.className = 'favorite-card-thumbnail';

        const videoSrc = video.s3_url || video.url ||
            `https://s3.regru.cloud/dorama-shorts/${encodeURIComponent(video.filename)}`;

        // –°–æ–∑–¥–∞–µ–º video —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –º–∏–Ω–∏–∞—Ç—é—Ä—ã
        const thumbnailVideo = document.createElement('video');
        thumbnailVideo.src = videoSrc;
        thumbnailVideo.muted = true;
        thumbnailVideo.playsInline = true;
        thumbnailVideo.preload = 'metadata';
        thumbnailVideo.style.width = '100%';
        thumbnailVideo.style.height = '100%';
        thumbnailVideo.style.objectFit = 'cover';

        // ‚úÖ –ò–°–ü–†–ê–í–õ–ï–ù–û: –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–∞–¥—Ä –û–î–ò–ù –†–ê–ó
        let frameLoaded = false;

        thumbnailVideo.addEventListener('loadedmetadata', () => {
            if (!frameLoaded) {
                thumbnailVideo.currentTime = Math.min(1, thumbnailVideo.duration * 0.1);
            }
        });

        thumbnailVideo.addEventListener('seeked', () => {
            if (!frameLoaded) {
                frameLoaded = true;
                console.log('‚úÖ –ú–∏–Ω–∏–∞—Ç—é—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞:', video.filename);
            }
        });

        // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
        thumbnailVideo.addEventListener('canplay', () => {
            if (frameLoaded) {
                thumbnailVideo.pause();
            }
        });

        thumbnail.appendChild(thumbnailVideo);

        const info = document.createElement('div');
        info.className = 'favorite-card-info';

        const title = document.createElement('div');
        title.className = 'favorite-card-title';
        title.textContent = video.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';

        const genre = document.createElement('div');
        genre.className = 'favorite-card-genre';
        genre.textContent = video.genre || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';

        info.appendChild(title);
        info.appendChild(genre);

        const removeBtn = document.createElement('button');
        removeBtn.className = 'favorite-card-remove';
        removeBtn.innerHTML = '‚ãÆ';
        removeBtn.setAttribute('aria-label', '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');
        removeBtn.setAttribute('title', '–£–¥–∞–ª–∏—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ');

        const handleCardClick = (e) => {
            if (!e.target.closest('.favorite-card-remove')) {
                const vm = window.videoManager;
                const videosList = (vm && vm.getVideos) ? vm.getVideos() : videos;
                const videoIndex = videosList.findIndex(v => v.filename === video.filename);

                if (videoIndex !== -1) {
                    switchTab('main');
                    // –ï—Å–ª–∏ videoManager –∏–º–µ–µ—Ç —Ç–µ–∫—É—â–∏–π –ø–æ—Ä—è–¥–æ–∫ ‚Äî –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
                    if (vm) {
                        // –ï—Å–ª–∏ —ç—Ç–æ—Ç —Ñ–∞–π–ª —É–∂–µ –µ—Å—Ç—å –≤ —Ç–µ–∫—É—â–µ–º –ø–æ—Ä—è–¥–∫–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤—ã—Å—Ç–∞–≤–∏–º –∏–Ω–¥–µ–∫—Å
                        const currentOrder = vm.getVideoOrder();
                        const orderIndex = currentOrder.indexOf(videoIndex);
                        if (orderIndex !== -1) {
                            vm.setCurrentOrderIndex(orderIndex);
                        } else {
                            // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –ø–æ—Ä—è–¥–∫–∞ –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å 0
                            const newOrder = [videoIndex, ...currentOrder];
                            vm.setVideoOrder(newOrder);
                            vm.setCurrentOrderIndex(0);
                        }

                        // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–µ—Ä–µ–∑ videoManager (–ø–µ—Ä–µ–¥–∞—ë–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
                        vm.loadVideo(
                            videoController,
                            updateButtonStates,
                            watchTracker,
                            videoTitle,
                            videoGenre,
                            currentTab,
                            hasFirstClickOccurred
                        ).catch(err => console.error('–û—à–∏–±–∫–∞ loadVideo —á–µ—Ä–µ–∑ –∫–∞—Ä—Ç–æ—á–∫—É –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ:', err));
                    } else {
                        // –§–æ–ª–ª–±–µ–∫: –µ—Å–ª–∏ videoManager –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–±—É–µ–º —Å—Ç–∞—Ä—É—é –ª–æ–≥–∏–∫—É (–º–µ–Ω–µ–µ –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω–æ)
                        const orderIndex = videoOrder.indexOf(videoIndex);
                        if (orderIndex !== -1) {
                            currentOrderIndex = orderIndex;
                            window.currentOrderIndex = currentOrderIndex;
                        } else {
                            currentOrderIndex = 0;
                            window.currentOrderIndex = currentOrderIndex;
                            videoOrder.unshift(videoIndex);
                            window.videoOrder = videoOrder;
                        }
                        if (window.loadVideo) {
                            window.loadVideo().catch(err => console.error('‚ùå –û—à–∏–±–∫–∞ loadVideo (fallback):', err));
                        }
                    }
                }
            }
        };

        card.addEventListener('click', handleCardClick);
        card.addEventListener('touchend', (e) => {
            e.stopPropagation();
            handleCardClick(e);
        }, { passive: false });

        removeBtn.addEventListener('click', async (e) => {
            e.stopPropagation();

            userFavorites = userFavorites.filter(id => id !== video.filename);
            updateButtonStates(video.filename);

            const success = await window.telegramAuth.toggleFavorite(video.filename);
            if (!success) {
                userFavorites.push(video.filename);
                updateButtonStates(video.filename);
            } else {
                card.style.opacity = '0';
                setTimeout(() => {
                    updateFavoritesList();
                }, 200);
            }
        });

        card.appendChild(thumbnail);
        card.appendChild(info);
        card.appendChild(removeBtn);

        return card;
    }

  // ===============================
  // –§–£–ù–ö–¶–ò–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –í–ò–î–ï–û
  // ===============================
  
  function setupButtonWithPointerEvents(button, handler) {
    if (!button) return;
    
    const handleClick = (e) => {
      e.preventDefault();
      e.stopPropagation();
      
      button.style.transform = 'scale(0.95)';
      setTimeout(() => {
        button.style.transform = 'scale(1)';
      }, 100);
      
      handler(e);
    };
    
    button.addEventListener('click', handleClick);
    button.addEventListener('touchend', (e) => {
      e.preventDefault();
      handleClick(e);
    });
  }

  // ===============================
  // –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø loadVideo()
  // ===============================

  window.videos = videos;
  window.videoOrder = videoOrder;
  window.currentOrderIndex = currentOrderIndex;
  window.hasFirstClickOccurred = hasFirstClickOccurred;
  window.updateButtonStates = updateButtonStates;
  window.startWatchTracking = (filename, currentTab) => {
      watchTracker.startWatchTracking(filename, currentTab);
  };
  window.updateLastVideoBatch = async () => {
      await videoManager.updateLastVideoBatch();
  };
  window.shuffleUnwatchedVideos = async () => {
    await videoManager.shuffleUnwatchedVideos();
  };

  // ===============================
  // –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û –° –°–ï–†–í–ï–†–ê
  // ===============================

  function updateButtonStates(videoId) {
    if (!videoId) return;
    
    if (likeButton) {
      const isLiked = userLikes.includes(videoId);
      likeButton.classList.toggle('active', isLiked);
      likeButton.setAttribute('data-video-id', videoId);
      
      const likeIcon = likeButton.querySelector('.like-icon');
      if (likeIcon) {
        likeIcon.src = isLiked ? 'frontend/assets/svg/like-active.svg' : 'frontend/assets/svg/like.svg';
      }
    }
    
    if (dislikeButton) {
      const isDisliked = userDislikes.includes(videoId);
      dislikeButton.classList.toggle('active', isDisliked);
      dislikeButton.setAttribute('data-video-id', videoId);
      
      const dislikeIcon = dislikeButton.querySelector('.dislike-icon');
      if (dislikeIcon) {
        dislikeIcon.src = isDisliked ? 'frontend/assets/svg/dislike-active.svg' : 'frontend/assets/svg/dislike.svg';
      }
    }
    
    if (favoriteButton) {
      const isFavorite = userFavorites.includes(videoId);
      favoriteButton.classList.toggle('active', isFavorite);
      favoriteButton.setAttribute('data-video-id', videoId);
      
      const favoriteIcon = favoriteButton.querySelector('.favorite-icon');
      if (favoriteIcon) {
        const timestamp = Date.now();
        favoriteIcon.src = isFavorite ? `frontend/assets/svg/favorites-active.svg?t=${timestamp}` : `frontend/assets/svg/favorites.svg?t=${timestamp}`;
      }
    }
  }

  function showDescription() {
    const videosList = window.videoManager ? window.videoManager.getVideos() : videos;
    const order = window.videoManager ? window.videoManager.getVideoOrder() : videoOrder;
    const currentIdx = window.videoManager ? window.videoManager.getCurrentOrderIndex() : currentOrderIndex;
    if (videosList.length === 0) {
        console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è');
        return;
    }
    
    const idx = order[currentIdx];
    const videoData = videosList[idx];
    
    if (videoData) {
      const title = videoData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
      const description = videoData.description || '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç';
      const series = videoData.series || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const seasons = videoData.seasons || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const status = videoData.status || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const country = videoData.country || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const genre = videoData.genre || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      const year = videoData.year || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
      
      const fullDescription = `${description}

–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: ${year}
–°–µ—Ä–∏–∏: ${series}
–°–µ–∑–æ–Ω—ã: ${seasons}  
–°—Ç–∞—Ç—É—Å: ${status}
–°—Ç—Ä–∞–Ω–∞: ${country}
–ñ–∞–Ω—Ä: ${genre}`;
      
      if (modalTitle) {
        modalTitle.textContent = title;
      }
      
      if (modalDescription) {
        modalDescription.textContent = fullDescription;
      }
      
      if (descriptionModal) {
        descriptionModal.classList.add('show');
      }
    }
  }

  function hideDescription() {
    if (descriptionModal) {
      descriptionModal.classList.remove('show');
    }
  }

  // ===============================
  // –ù–ê–°–¢–†–û–ô–ö–ê –ö–ù–û–ü–û–ö
  // ===============================
  
  setupButtonWithPointerEvents(likeButton, async (e) => {
    const videoId = likeButton.getAttribute('data-video-id');
    if (!videoId) return;
    
    try {
      const freshUserData = await window.telegramAuth.getUserData();
      if (freshUserData) {
        userFavorites = freshUserData.favorites || [];
        userLikes = freshUserData.likes || [];
        userDislikes = freshUserData.dislikes || [];
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    const isCurrentlyLiked = userLikes.includes(videoId);
    const wasDisliked = userDislikes.includes(videoId);
    
    if (isCurrentlyLiked) {
      userLikes = userLikes.filter(id => id !== videoId);
    } else {
      userLikes.push(videoId);
      if (wasDisliked) {
        userDislikes = userDislikes.filter(id => id !== videoId);
      }
    }
    updateButtonStates(videoId);
    
    const actions = [];
    
    if (isCurrentlyLiked) {
      actions.push(window.telegramAuth.updateReaction('remove_like', videoId));
    } else {
      actions.push(window.telegramAuth.updateReaction('add_like', videoId));
      if (wasDisliked) {
        actions.push(window.telegramAuth.updateReaction('remove_dislike', videoId));
      }
    }
    
    Promise.all(actions).then(results => {
      const allSuccess = results.every(success => success === true);
      if (!allSuccess) {
        if (isCurrentlyLiked) {
          userLikes.push(videoId);
        } else {
          userLikes = userLikes.filter(id => id !== videoId);
          if (wasDisliked) {
            userDislikes.push(videoId);
          }
        }
        updateButtonStates(videoId);
      }
    });
  });

  setupButtonWithPointerEvents(dislikeButton, async (e) => {
    const videoId = dislikeButton.getAttribute('data-video-id');
    if (!videoId) return;
    
    try {
      const freshUserData = await window.telegramAuth.getUserData();
      if (freshUserData) {
        userFavorites = freshUserData.favorites || [];
        userLikes = freshUserData.likes || [];
        userDislikes = freshUserData.dislikes || [];
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    const isCurrentlyDisliked = userDislikes.includes(videoId);
    const wasLiked = userLikes.includes(videoId);
    
    if (isCurrentlyDisliked) {
      userDislikes = userDislikes.filter(id => id !== videoId);
    } else {
      userDislikes.push(videoId);
      if (wasLiked) {
        userLikes = userLikes.filter(id => id !== videoId);
      }
    }
    updateButtonStates(videoId);
    
    const actions = [];
    
    if (isCurrentlyDisliked) {
      actions.push(window.telegramAuth.updateReaction('remove_dislike', videoId));
    } else {
      actions.push(window.telegramAuth.updateReaction('add_dislike', videoId));
      if (wasLiked) {
        actions.push(window.telegramAuth.updateReaction('remove_like', videoId));
      }
    }
    
    Promise.all(actions).then(results => {
      const allSuccess = results.every(success => success === true);
      if (!allSuccess) {
        if (isCurrentlyDisliked) {
          userDislikes.push(videoId);
        } else {
          userDislikes = userDislikes.filter(id => id !== videoId);
          if (wasLiked) {
            userLikes.push(videoId);
          }
        }
        updateButtonStates(videoId);
      }
    });
  });

  setupButtonWithPointerEvents(favoriteButton, async (e) => {
    const videoId = favoriteButton.getAttribute('data-video-id');
    if (!videoId) return;
    
    try {
      const freshUserData = await window.telegramAuth.getUserData();
      if (freshUserData) {
        userFavorites = freshUserData.favorites || [];
        userLikes = freshUserData.likes || [];
        userDislikes = freshUserData.dislikes || [];
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    }
    
    const isFavorite = userFavorites.includes(videoId);
    
    if (isFavorite) {
      userFavorites = userFavorites.filter(id => id !== videoId);
    } else {
      userFavorites.push(videoId);
    }
    updateButtonStates(videoId);
    
    window.telegramAuth.toggleFavorite(videoId).then(success => {
      if (!success) {
        if (isFavorite) {
          userFavorites.push(videoId);
        } else {
          userFavorites = userFavorites.filter(id => id !== videoId);
        }
        updateButtonStates(videoId);
      }
    });
    
    if (currentTab === 'favorites') {
      setTimeout(() => updateFavoritesList(), 300);
    }
  });

  if (descriptionButton) {
    descriptionButton.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      showDescription();
    });
    
    descriptionButton.addEventListener('touchend', (e) => {
      e.preventDefault();
      e.stopPropagation();
      showDescription();
    });
  }

  if (modalClose) {
    modalClose.addEventListener('click', (e) => {
      e.preventDefault();
      e.stopPropagation();
      hideDescription();
    });
    
    modalClose.addEventListener('touchend', (e) => {
      e.preventDefault();
      e.stopPropagation();
      hideDescription();
    });
  }

  if (descriptionModal) {
    descriptionModal.addEventListener('click', (e) => {
      if (e.target === descriptionModal) {
        hideDescription();
      }
    });
  }

  // ===============================
  // –ù–ê–°–¢–†–û–ô–ö–ê VIDEO –≠–õ–ï–ú–ï–ù–¢–û–í
  // ===============================
  
  const activePlayer = videoPlayerManager.getActivePlayer();
  if (activePlayer) {
    // ‚úÖ –í–ê–ñ–ù–û: –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –∑–≤—É–∫ –≤–∫–ª—é—á–µ–Ω
    activePlayer.muted = false;
    activePlayer.volume = 1.0;
    
    console.log('üîä –ù–∞—á–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–ª–µ–µ—Ä–∞:', {
      muted: activePlayer.muted,
      volume: activePlayer.volume
    });
    
    activePlayer.addEventListener('playing', async () => {
      console.log('üé¨ –í–∏–¥–µ–æ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—Å—è');
      
      // ‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–≤—É–∫ –ø—Ä–∏ –∫–∞–∂–¥–æ–º –∑–∞–ø—É—Å–∫–µ
      if (activePlayer.muted) {
        console.warn('‚ö†Ô∏è –ó–≤—É–∫ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –ø—Ä–∏ playing, –≤–∫–ª—é—á–∞–µ–º');
        activePlayer.muted = false;
      }
      
      setTimeout(async () => {
        await videoPreloader.preloadNextVideo(currentOrderIndex, videoOrder, videos);
      }, 1000);
    });
    
    // ‚úÖ –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å–æ –∑–≤—É–∫–æ–º
    activePlayer.addEventListener('volumechange', () => {
      console.log(`üîä –ì—Ä–æ–º–∫–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞: volume=${activePlayer.volume}, muted=${activePlayer.muted}`);
    });
    
    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞—É–∑—ã
    activePlayer.addEventListener('pause', () => {
      console.log('‚è∏Ô∏è –í–∏–¥–µ–æ –Ω–∞ –ø–∞—É–∑–µ');
    });
    
    // ‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
    activePlayer.addEventListener('error', (e) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –≤–∏–¥–µ–æ:', e);
    });
  }

  // ===============================
  // –ì–õ–û–ë–ê–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
  // ===============================
  
  window.nextVideo = async () => {
      await videoManager.nextVideo(
          videoController,
          updateButtonStates,
          watchTracker,
          videoTitle,
          videoGenre,
          currentTab,
          hasFirstClickOccurred
      );
  };
  window.loadVideo = async () => {
      await videoManager.loadVideo(
          videoController,
          updateButtonStates,
          watchTracker,
          videoTitle,
          videoGenre,
          currentTab,
          hasFirstClickOccurred
      );
  };

  // ===============================
  // –ó–ê–ü–£–°–ö –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø
  // ===============================

    await videoManager.fetchVideos(
        updateFavoritesList,
        videoController,
        updateButtonStates,
        watchTracker,
        videoTitle,
        videoGenre,
        currentTab,
        hasFirstClickOccurred
    );

  console.log('üé• –û–∂–∏–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫');

  // ===============================
  // –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ó–í–£–ö–ê
  // ===============================

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞ –∫–∞–∂–¥—ã–µ 2 —Å–µ–∫—É–Ω–¥—ã
  setInterval(() => {
    const active = videoPlayerManager.getActivePlayer();
    const inactive = videoPlayerManager.getInactivePlayer();
    
    if (active && !active.paused && currentTab === 'main') {
      if (active.muted) {
        console.warn('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ê–∫—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ –±–µ–∑ –∑–≤—É–∫–∞! –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...');
        active.muted = false;
        active.volume = 1.0;
      }
    }
    
    // –ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –±–µ–∑ –∑–≤—É–∫–∞
    if (inactive && !inactive.paused) {
      if (!inactive.muted) {
        console.warn('‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ê: –ù–µ–∞–∫—Ç–∏–≤–Ω–æ–µ –≤–∏–¥–µ–æ —Å–æ –∑–≤—É–∫–æ–º! –ò—Å–ø—Ä–∞–≤–ª—è–µ–º...');
        inactive.muted = true;
        inactive.pause();
      }
    }
  }, 2000);

  // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
  setInterval(async () => {
    try {
      const freshUserData = await window.telegramAuth.getUserData();
      if (freshUserData) {
        userFavorites = freshUserData.favorites || [];
        userLikes = freshUserData.likes || [];
        userDislikes = freshUserData.dislikes || [];
        watchTracker.updateWatchedVideos(freshUserData.watchedVideos || []);
        
        const currentVideoId = likeButton?.getAttribute('data-video-id');
        if (currentVideoId) {
          updateButtonStates(currentVideoId);
        }
        
        if (currentTab === 'favorites') {
          updateFavoritesList();
        }
      }
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏:', error);
    }
  }, 30000);

  window.addEventListener('beforeunload', () => {
    if (lastVideoUpdateTimer) {
      clearTimeout(lastVideoUpdateTimer);
      const currentVideoId = likeButton?.getAttribute('data-video-id');
      if (currentVideoId) {
        window.telegramAuth.updateLastVideo(currentVideoId);
      }
    }
    
    if (sessionOrderUpdateTimer) {
      clearTimeout(sessionOrderUpdateTimer);
      window.telegramAuth.saveSessionOrder(currentSessionOrder);
    }

    watchTracker.cleanup();
  });
// ===============================
// –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–û–ù–§–õ–ò–ö–¢–û–í
// ===============================

setInterval(() => {
  const current = document.getElementById('currentVideo');
  const next = document.getElementById('nextVideo');
  const active = videoPlayerManager.getActivePlayer();
  const inactive = videoPlayerManager.getInactivePlayer();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: –û–±–∞ –ø–ª–µ–µ—Ä–∞ –∏–≥—Ä–∞—é—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
  if (!current.paused && !next.paused) {
    console.error('üö® –ö–û–ù–§–õ–ò–ö–¢: –û–±–∞ –ø–ª–µ–µ—Ä–∞ –∏–≥—Ä–∞—é—Ç!');
    inactive.pause();
    inactive.muted = true;
    inactive.volume = 0;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä —Å–æ –∑–≤—É–∫–æ–º
  if (!inactive.paused && (!inactive.muted || inactive.volume > 0)) {
    console.error('üö® –ö–û–ù–§–õ–ò–ö–¢: –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä —Å–æ –∑–≤—É–∫–æ–º!');
    inactive.pause();
    inactive.muted = true;
    inactive.volume = 0;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä –±–µ–∑ –∑–≤—É–∫–∞
  if (!active.paused && (active.muted || active.volume === 0)) {
    console.error('üö® –ü–†–û–ë–õ–ï–ú–ê: –ê–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä –±–µ–∑ –∑–≤—É–∫–∞!');
    active.muted = false;
    active.volume = 1.0;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: –ó–∞–µ–¥–∞–Ω–∏–µ (currentTime –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è)
  if (window.lastCheckTime !== undefined) {
    if (!active.paused && active.currentTime === window.lastCurrentTime) {
      console.error('üö® –ó–ê–ï–î–ê–ù–ò–ï: currentTime –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è!');
      console.log('–°–æ—Å—Ç–æ—è–Ω–∏–µ:', {
        paused: active.paused,
        currentTime: active.currentTime,
        readyState: active.readyState,
        buffered: active.buffered.length > 0 ? active.buffered.end(0) : 0,
        networkState: active.networkState
      });
      
      // –ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø—Ä–∞–≤–∏—Ç—å
      if (active.readyState >= 2) {
        active.play().catch(e => console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', e));
      }
    }
  }
  
  window.lastCurrentTime = active.currentTime;
  window.lastCheckTime = Date.now();
  
}, 2000);

    window.addEventListener("beforeunload", () => {
        videoManager.cleanup();
        watchTracker.cleanup();
    });

  console.log('üéâ DoramaShorts v9.1 —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–º –∑–≤—É–∫–æ–º –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!');
});