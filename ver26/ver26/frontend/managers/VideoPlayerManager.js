class VideoPlayerManager {
    constructor() {
        this.currentPlayer = document.getElementById('currentVideo');
        this.nextPlayer = document.getElementById('nextVideo');
        this.activePlayer = 'current';
        this.isNextVideoReady = false;
        this.nextVideoData = null;
        this.isSwitching = false; // ‚úÖ –ù–û–í–´–ô —Ñ–ª–∞–≥

        // ‚úÖ –£–±–∏—Ä–∞–µ–º autoplay –∏–∑ HTML
        this.currentPlayer.removeAttribute('autoplay');
        this.nextPlayer.removeAttribute('autoplay');

        // ‚úÖ –ù–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        this.currentPlayer.muted = false;
        this.currentPlayer.volume = 1.0;
        this.nextPlayer.muted = true;
        this.nextPlayer.volume = 0; // ‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å 0 –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏
        this.nextPlayer.pause();

        console.log('‚úÖ VideoPlayerManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    getActivePlayer() {
        return this.activePlayer === 'current' ? this.currentPlayer : this.nextPlayer;
    }

    getInactivePlayer() {
        return this.activePlayer === 'current' ? this.nextPlayer : this.currentPlayer;
    }

    async preloadNextVideo(videoData) {
        if (!videoData) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏');
            return false;
        }

        const inactivePlayer = this.getInactivePlayer();
        const src = videoData.s3_url || videoData.url ||
            `https://s3.regru.cloud/dorama-shorts/${encodeURIComponent(videoData.filename)}`;

        console.log(`üîÑ –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞:`, videoData.filename);

        // ===== –ö–†–ò–¢–ò–ß–ù–û: –ü–æ–ª–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ =====
        inactivePlayer.pause();
        inactivePlayer.currentTime = 0;
        inactivePlayer.muted = true;
        inactivePlayer.volume = 0; // ‚úÖ –ì—Ä–æ–º–∫–æ—Å—Ç—å 0!

        // ‚úÖ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π src
        if (inactivePlayer.src) {
            inactivePlayer.removeAttribute('src');
            inactivePlayer.load();
        }

        this.nextVideoData = videoData;
        this.isNextVideoReady = false;

        return new Promise((resolve) => {
            let resolved = false;

            const cleanup = () => {
                if (resolved) return;
                resolved = true;
                inactivePlayer.removeEventListener('canplay', onCanPlay);
                inactivePlayer.removeEventListener('canplaythrough', onCanPlay);
                inactivePlayer.removeEventListener('error', onError);
                inactivePlayer.removeEventListener('loadeddata', onLoadedData);
            };

            const onCanPlay = () => {
                if (resolved) return;

                if (inactivePlayer.buffered.length > 0) {
                    const bufferedEnd = inactivePlayer.buffered.end(0);
                    console.log(`üìä –ë—É—Ñ–µ—Ä: ${bufferedEnd.toFixed(1)}—Å`);

                    // ‚úÖ –¢—Ä–µ–±—É–µ–º –º–∏–Ω–∏–º—É–º 3 —Å–µ–∫—É–Ω–¥—ã –±—É—Ñ–µ—Ä–∞
                    if (bufferedEnd >= 3 || inactivePlayer.readyState >= 3) {
                        this.isNextVideoReady = true;
                        cleanup();
                        console.log('‚úÖ –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ');
                        resolve(true);
                    }
                }
            };

            const onLoadedData = () => {
                if (resolved) return;
                console.log('üì• –î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã, readyState:', inactivePlayer.readyState);
            };

            const onError = (e) => {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∏:', e);
                cleanup();
                resolve(false);
            };

            inactivePlayer.addEventListener('canplay', onCanPlay);
            inactivePlayer.addEventListener('canplaythrough', onCanPlay);
            inactivePlayer.addEventListener('loadeddata', onLoadedData);
            inactivePlayer.addEventListener('error', onError);

            // ‚úÖ –£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —Ç–∞–π–º–∞—É—Ç
            setTimeout(() => {
                if (!resolved) {
                    if (inactivePlayer.readyState >= 2) {
                        this.isNextVideoReady = true;
                        cleanup();
                        console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: –≤–∏–¥–µ–æ —á–∞—Å—Ç–∏—á–Ω–æ –≥–æ—Ç–æ–≤–æ');
                        resolve(true);
                    } else {
                        cleanup();
                        console.warn('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç: –≤–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ');
                        resolve(false);
                    }
                }
            }, 8000); // ‚úÖ 8 —Å–µ–∫—É–Ω–¥ –≤–º–µ—Å—Ç–æ 5

            inactivePlayer.src = src;
            inactivePlayer.preload = 'auto';
            inactivePlayer.load();
        });
    }

    async switchToNextVideo() {
        // ‚úÖ –ó–∞—â–∏—Ç–∞ –æ—Ç –¥–≤–æ–π–Ω–æ–≥–æ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è
        if (this.isSwitching) {
            console.warn('‚ö†Ô∏è –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç');
            return null;
        }

        this.isSwitching = true;

        try {
            const current = this.getActivePlayer();
            const next = this.getInactivePlayer();

            console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: ${this.activePlayer} ‚Üí ${this.activePlayer === 'current' ? 'next' : 'current'}`);

            // ===== ‚úÖ –î–û–ë–ê–í–¨ –≠–¢–£ –ü–†–û–í–ï–†–ö–£ –°–Æ–î–ê =====
            if (next.readyState < 2) {
                console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –∂–¥–µ–º...');
                await new Promise((resolve) => {
                    const onReady = () => {
                        console.log('‚úÖ –í–∏–¥–µ–æ –≥–æ—Ç–æ–≤–æ');
                        next.removeEventListener('loadeddata', onReady);
                        resolve();
                    };

                    next.addEventListener('loadeddata', onReady, { once: true });

                    // –¢–∞–π–º–∞—É—Ç 400ms
                    setTimeout(() => {
                        next.removeEventListener('loadeddata', onReady);
                        console.log('‚è±Ô∏è –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è');
                        resolve();
                    }, 400);
                });
            }
            // ===== –ö–û–ù–ï–¶ –î–û–ë–ê–í–õ–ï–ù–ò–Ø =====

            // ===== –®–ê–ì 1: –ü–û–õ–ù–ê–Ø –û–°–¢–ê–ù–û–í–ö–ê –¢–ï–ö–£–©–ï–ì–û =====
            console.log('‚èπÔ∏è –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤–∏–¥–µ–æ');
            current.pause();
            current.muted = true;
            current.volume = 0;

            // ‚úÖ –ñ–¥–µ–º, –ø–æ–∫–∞ —Ç–µ–∫—É—â–µ–µ —Ç–æ—á–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è
            await new Promise(resolve => setTimeout(resolve, 50));

            // ===== –®–ê–ì 2: –ü–û–î–ì–û–¢–û–í–ö–ê –ù–û–í–û–ì–û =====
            console.log('üîä –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ –≤–∏–¥–µ–æ');

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
            if (next.readyState < 2) {
                console.warn('‚ö†Ô∏è –í–∏–¥–µ–æ –Ω–µ –≥–æ—Ç–æ–≤–æ, –∂–¥–µ–º...');
                await new Promise((resolve) => {
                    const checkReady = setInterval(() => {
                        if (next.readyState >= 2) {
                            clearInterval(checkReady);
                            resolve();
                        }
                    }, 100);

                    setTimeout(() => {
                        clearInterval(checkReady);
                        resolve();
                    }, 2000);
                });
            }

            // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫
            next.muted = false;
            next.volume = 1.0;

            // ===== –®–ê–ì 3: –í–ò–ó–£–ê–õ–¨–ù–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï =====
            console.log('üé® –í–∏–∑—É–∞–ª—å–Ω–æ–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ');

            current.style.opacity = '0';
            current.style.visibility = 'hidden';
            current.style.zIndex = '1';
            current.style.pointerEvents = 'none';

            next.style.visibility = 'visible';
            next.style.opacity = '1';
            next.style.zIndex = '2';
            next.style.pointerEvents = 'auto';

            // ===== –®–ê–ì 4: –ü–ï–†–ï–ö–õ–Æ–ß–ê–ï–ú –ê–ö–¢–ò–í–ù–´–ô =====
            this.activePlayer = this.activePlayer === 'current' ? 'next' : 'current';

            // ===== –®–ê–ì 5: –ó–ê–ü–£–°–ö –ù–û–í–û–ì–û =====
            if (window.hasFirstClickOccurred) {
                console.log('‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤–æ–µ –≤–∏–¥–µ–æ');

                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞ –Ω–∞—á–∞–ª–æ
                next.currentTime = 0;

                try {
                    await next.play();
                    console.log('‚úÖ –ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ');

                    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 200ms
                    setTimeout(() => {
                        if (next.paused) {
                            console.error('‚ùå –í–∏–¥–µ–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª–æ—Å—å, –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º');
                            next.play().catch(e => console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞:', e));
                        }

                        if (next.muted || next.volume === 0) {
                            console.error('‚ùå –ó–≤—É–∫ –≤—ã–∫–ª—é—á–µ–Ω, –≤–∫–ª—é—á–∞–µ–º');
                            next.muted = false;
                            next.volume = 1.0;
                        }

                        console.log('üîä –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è:', {
                            paused: next.paused,
                            muted: next.muted,
                            volume: next.volume,
                            currentTime: next.currentTime,
                            readyState: next.readyState
                        });
                    }, 200);

                } catch (error) {
                    console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞:', error);

                    // –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞
                    next.muted = false;
                    next.volume = 1.0;
                    next.currentTime = 0;

                    try {
                        await next.play();
                        console.log('‚úÖ –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —É—Å–ø–µ—à–Ω–∞');
                    } catch (retryError) {
                        console.error('‚ùå –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å:', retryError);
                    }
                }
            }

            // ===== –®–ê–ì 6: –û–ß–ò–°–¢–ö–ê –°–¢–ê–†–û–ì–û =====
            setTimeout(() => {
                console.log('üóëÔ∏è –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–π –ø–ª–µ–µ—Ä');
                current.removeAttribute('src');
                current.load();
                current.currentTime = 0;
            }, 500);

            this.isNextVideoReady = false;

            return this.nextVideoData;

        } finally {
            // ‚úÖ –°–Ω–∏–º–∞–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á–µ—Ä–µ–∑ 300ms
            setTimeout(() => {
                this.isSwitching = false;
            }, 300);
        }
    }

    getNextVideoData() {
        return this.nextVideoData;
    }

    isNextReady() {
        return this.isNextVideoReady && !this.isSwitching;
    }

    // ‚úÖ –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ
    stopInactivePlayer() {
        const inactive = this.getInactivePlayer();
        if (!inactive.paused) {
            console.warn('‚ö†Ô∏è –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π –ø–ª–µ–µ—Ä –∏–≥—Ä–∞–µ—Ç, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º');
            inactive.pause();
            inactive.muted = true;
            inactive.volume = 0;
        }
    }
}