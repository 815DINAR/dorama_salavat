export default class VideoManager {
    constructor(videoPlayerManager, videoPreloader, telegramAuth) {
        this.videoPlayerManager = videoPlayerManager;
        this.videoPreloader = videoPreloader;
        this.telegramAuth = telegramAuth;

        // –î–∞–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        this.videos = [];
        this.videoOrder = [];
        this.currentOrderIndex = 0;

        // –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        this.watchedVideosSet = new Set();
        this.currentSessionOrder = [];

        // –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        this.userFavorites = [];
        this.userLikes = [];
        this.userDislikes = [];

        // –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –≤–∏–¥–µ–æ
        this.skippedVideosBuffer = [];
        this.SKIPPED_BUFFER_SIZE = 10;
        this.MIN_VIDEOS_BEFORE_REPEAT = 5;

        // –¢–∞–π–º–µ—Ä—ã
        this.sessionOrderUpdateTimer = null;
        this.lastVideoUpdateTimer = null;

        // –§–ª–∞–≥ –∑–∞–≥—Ä—É–∑–∫–∏
        this.isLoadingVideo = false;

        console.log('‚úÖ VideoManager –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    // ===============================
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø
    // ===============================

    initializeFromUserData(userData) {
        if (userData) {
            this.watchedVideosSet = new Set(userData.watchedVideos || []);
            this.currentSessionOrder = userData.currentSessionOrder || [];
        }
    }

    // ===============================
    // –ì–ï–¢–¢–ï–†–´ –ò –°–ï–¢–¢–ï–†–´
    // ===============================

    setVideos(videos) {
        this.videos = videos;
        window.videos = videos;
    }

    getVideos() {
        return this.videos;
    }

    setVideoOrder(order) {
        this.videoOrder = order;
        window.videoOrder = order;
    }

    getVideoOrder() {
        return this.videoOrder;
    }

    setCurrentOrderIndex(index) {
        this.currentOrderIndex = index;
        window.currentOrderIndex = index;
    }

    getCurrentOrderIndex() {
        return this.currentOrderIndex;
    }

    getCurrentVideo() {
        const idx = this.videoOrder[this.currentOrderIndex];
        return this.videos[idx];
    }

    isLoading() {
        return this.isLoadingVideo;
    }

    // ===============================
    // –ü–ï–†–ï–ú–ï–®–ò–í–ê–ù–ò–ï –ù–ï–ü–†–û–°–ú–û–¢–†–ï–ù–ù–´–• –í–ò–î–ï–û
    // ===============================

    async shuffleUnwatchedVideos() {
        const unwatchedIndices = [];

        this.videos.forEach((video, index) => {
            if (!this.watchedVideosSet.has(video.filename)) {
                const bufferIndex = this.skippedVideosBuffer.indexOf(video.filename);
                if (bufferIndex === -1 || bufferIndex < this.skippedVideosBuffer.length - this.MIN_VIDEOS_BEFORE_REPEAT) {
                    unwatchedIndices.push(index);
                }
            }
        });

        console.log(`üìä –ü—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ: ${this.watchedVideosSet.size}, –¥–æ—Å—Ç—É–ø–Ω–æ: ${unwatchedIndices.length}`);

        if (unwatchedIndices.length < 3 && this.skippedVideosBuffer.length > 0) {
            const oldSkipped = this.skippedVideosBuffer.slice(0, Math.max(0, this.skippedVideosBuffer.length - this.MIN_VIDEOS_BEFORE_REPEAT));
            oldSkipped.forEach(filename => {
                const index = this.videos.findIndex(v => v.filename === filename);
                if (index !== -1 && !this.watchedVideosSet.has(filename)) {
                    unwatchedIndices.push(index);
                }
            });
        }

        if (unwatchedIndices.length === 0) {
            console.log('üîÑ –í—Å–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–Ω–æ, –Ω–æ–≤—ã–π –∫—Ä—É–≥');
            this.watchedVideosSet.clear();
            this.currentSessionOrder = [];
            this.skippedVideosBuffer = [];

            await this.telegramAuth.resetWatchProgress();

            unwatchedIndices.push(...this.videos.map((_, i) => i));
        }

        this.videoOrder = [...unwatchedIndices];
        for (let i = this.videoOrder.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [this.videoOrder[i], this.videoOrder[j]] = [this.videoOrder[j], this.videoOrder[i]];
        }

        this.currentOrderIndex = 0;
        window.videoOrder = this.videoOrder;
        window.currentOrderIndex = this.currentOrderIndex;

        this.currentSessionOrder = this.videoOrder.map(idx => this.videos[idx].filename);

        this.saveSessionOrderBatch();

        console.log('üîÄ –í–∏–¥–µ–æ –ø–µ—Ä–µ–º–µ—à–∞–Ω—ã:', this.videoOrder.length);
    }

    // ===============================
    // –í–û–°–°–¢–ê–ù–û–í–õ–ï–ù–ò–ï –ü–û–†–Ø–î–ö–ê –°–ï–°–°–ò–ò
    // ===============================

    restoreSessionOrder() {
        const existingFilenames = new Set(this.videos.map(v => v.filename));
        const validOrder = this.currentSessionOrder.filter(filename => existingFilenames.has(filename));

        if (validOrder.length === 0) {
            this.shuffleUnwatchedVideos();
            return;
        }

        this.videoOrder = [];
        validOrder.forEach(filename => {
            const index = this.videos.findIndex(v => v.filename === filename);
            if (index !== -1 && !this.watchedVideosSet.has(filename)) {
                this.videoOrder.push(index);
            }
        });

        if (this.videoOrder.length === 0) {
            this.shuffleUnwatchedVideos();
            return;
        }

        this.currentOrderIndex = 0;
        window.videoOrder = this.videoOrder;
        window.currentOrderIndex = this.currentOrderIndex;
        this.currentSessionOrder = validOrder;
        console.log('‚úÖ –ü–æ—Ä—è–¥–æ–∫ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω:', this.videoOrder.length);
    }

    // ===============================
    // –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û
    // ===============================

    async loadVideo(
        videoController,
        updateButtonStates,
        resetWatchTimer,
        startWatchTracking,
        videoTitle,
        videoGenre,
        currentTab,
        hasFirstClickOccurred
    ) {
        if (this.isLoadingVideo) {
            console.log('‚è≥ –£–∂–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è');
            return;
        }

        if (this.videos.length === 0) {
            console.warn('‚ö†Ô∏è –ù–µ—Ç –≤–∏–¥–µ–æ');
            return;
        }

        this.isLoadingVideo = true;
        videoController.setLoadingState(true);

        try {
            if (this.videoOrder.length === 0 || this.currentOrderIndex >= this.videoOrder.length) {
                await this.shuffleUnwatchedVideos();
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try {
                const freshUserData = await this.telegramAuth.getUserData();
                if (freshUserData) {
                    this.userFavorites = freshUserData.favorites || [];
                    this.userLikes = freshUserData.likes || [];
                    this.userDislikes = freshUserData.dislikes || [];
                    this.watchedVideosSet = new Set(freshUserData.watchedVideos || []);
                }
            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö:', error);
            }

            const idx = this.videoOrder[this.currentOrderIndex];
            const videoData = this.videos[idx];
            console.log(`üé¨ –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–∏–¥–µ–æ ${this.currentOrderIndex + 1}/${this.videoOrder.length}`);

            if (videoData) {
                const videoId = videoData.filename;

                updateButtonStates(videoId);
                resetWatchTimer();

                // ===== –ü–†–û–í–ï–†–ö–ê –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ò =====

                const isNextVideoReady = this.videoPlayerManager.isNextReady();
                const nextVideoData = this.videoPlayerManager.getNextVideoData();

                if (isNextVideoReady && nextVideoData && nextVideoData.filename === videoId) {
                    console.log('üöÄ –ú–ì–ù–û–í–ï–ù–ù–û–ï –ü–ï–†–ï–ö–õ–Æ–ß–ï–ù–ò–ï');

                    await this.videoPlayerManager.switchToNextVideo();

                    if (currentTab === 'main' && hasFirstClickOccurred) {
                        startWatchTracking(videoId);
                    }

                } else {
                    // –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
                    console.log('üìÅ –û–±—ã—á–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞:', videoId);

                    const activePlayer = this.videoPlayerManager.getActivePlayer();
                    const newSrc = videoData.s3_url || videoData.url ||
                        `https://s3.regru.cloud/dorama-shorts/${encodeURIComponent(videoData.filename)}`;

                    if (activePlayer.src !== newSrc) {
                        // ‚úÖ –í–ê–ñ–ù–û: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –≤–∫–ª—é—á–∞–µ–º –∑–≤—É–∫
                        activePlayer.muted = false;
                        activePlayer.volume = 1.0;

                        console.log('üîä –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–≤—É–∫ –¥–ª—è –æ–±—ã—á–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏:', {
                            muted: activePlayer.muted,
                            volume: activePlayer.volume
                        });

                        activePlayer.src = newSrc;
                        activePlayer.load();

                        if (currentTab === 'main' && hasFirstClickOccurred) {
                            activePlayer.play().then(() => {
                                console.log('‚úÖ –í–∏–¥–µ–æ –∑–∞–ø—É—â–µ–Ω–æ —Å–æ –∑–≤—É–∫–æ–º');

                                // ‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–≤—É–∫–∞
                                setTimeout(() => {
                                    if (activePlayer.muted) {
                                        console.warn('‚ö†Ô∏è –ó–≤—É–∫ –±—ã–ª –≤—ã–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞, –≤–∫–ª—é—á–∞–µ–º');
                                        activePlayer.muted = false;
                                    }
                                    console.log('üîä –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–≤—É–∫–∞:', {
                                        muted: activePlayer.muted,
                                        volume: activePlayer.volume,
                                        paused: activePlayer.paused
                                    });
                                }, 100);

                                startWatchTracking(videoId);
                            }).catch(error => {
                                console.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è:', error);
                            });
                        }
                    }
                }

                // ===== –ü–†–ï–î–ó–ê–ì–†–£–ó–ö–ê –°–õ–ï–î–£–Æ–©–ï–ì–û =====

                setTimeout(async () => {
                    if (this.videoPreloader) {
                        await this.videoPreloader.preloadNextVideo(this.currentOrderIndex, this.videoOrder, this.videos);
                    }
                }, 500);

                // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ UI
                if (videoTitle) {
                    videoTitle.textContent = videoData.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
                }
                if (videoGenre) {
                    videoGenre.textContent = `${videoData.genre || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
                }

                this.updateLastVideoBatch(videoId);
            }
        } finally {
            this.isLoadingVideo = false;
            videoController.setLoadingState(false);
        }
    }

    // ===============================
    // –°–õ–ï–î–£–Æ–©–ï–ï –í–ò–î–ï–û
    // ===============================

    async nextVideo(
        videoController,
        updateButtonStates,
        resetWatchTimer,
        startWatchTracking,
        videoTitle,
        videoGenre,
        currentTab,
        hasFirstClickOccurred
    ) {
        console.log('‚è≠Ô∏è –°–ª–µ–¥—É—é—â–µ–µ –≤–∏–¥–µ–æ');

        if (this.videos.length > 0 && this.videoOrder.length > 0 && this.currentOrderIndex < this.videoOrder.length) {
            const currentVideo = this.videos[this.videoOrder[this.currentOrderIndex]];
            if (currentVideo && !this.watchedVideosSet.has(currentVideo.filename)) {
                this.addToSkippedBuffer(currentVideo.filename);
            }
        }

        const newIndex = this.currentOrderIndex + 1;

        if (newIndex >= this.videoOrder.length) {
            await this.shuffleUnwatchedVideos();
        } else {
            this.currentOrderIndex = newIndex;
            window.currentOrderIndex = this.currentOrderIndex;
        }

        await this.loadVideo(
            videoController,
            updateButtonStates,
            resetWatchTimer,
            startWatchTracking,
            videoTitle,
            videoGenre,
            currentTab,
            hasFirstClickOccurred
        );
    }

    // ===============================
    // –ó–ê–ì–†–£–ó–ö–ê –í–ò–î–ï–û –° –°–ï–†–í–ï–†–ê
    // ===============================

    async fetchVideos(
        updateFavoritesList,
        videoController,
        updateButtonStates,
        resetWatchTimer,
        startWatchTracking,
        videoTitle,
        videoGenre,
        currentTab,
        hasFirstClickOccurred
    ) {
        console.log('üì• –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ...');
        try {
            const response = await fetch('get_videos.php');

            if (!response.ok) {
                throw new Error(`HTTP error: ${response.status}`);
            }

            const rawText = await response.text();

            try {
                this.videos = JSON.parse(rawText);
                window.videos = this.videos;
                console.log('‚úÖ –í–∏–¥–µ–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ:', this.videos.length);

                if (this.videos.length > 0) {
                    const existingFilenames = this.videos.map(v => v.filename);
                    await this.telegramAuth.cleanDeletedVideos(existingFilenames);

                    if (this.currentSessionOrder.length > 0) {
                        this.restoreSessionOrder();
                    } else {
                        await this.shuffleUnwatchedVideos();
                    }

                    await this.loadVideo(
                        videoController,
                        updateButtonStates,
                        resetWatchTimer,
                        startWatchTracking,
                        videoTitle,
                        videoGenre,
                        currentTab,
                        hasFirstClickOccurred
                    );
                    updateFavoritesList();

                    // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–≤—ã—Ö –≤–∏–¥–µ–æ
                    setTimeout(async () => {
                        if (this.videoPreloader) {
                            await this.videoPreloader.preloadNextVideo(this.currentOrderIndex, this.videoOrder, this.videos);
                        }
                    }, 1000);

                } else {
                    console.warn('‚ö†Ô∏è –ú–∞—Å—Å–∏–≤ –≤–∏–¥–µ–æ –ø—É—Å—Ç–æ–π');
                }
            } catch (parseError) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON:', parseError);
            }
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ:', error);
        }
    }

    // ===============================
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´
    // ===============================

    addToSkippedBuffer(filename) {
        const existingIndex = this.skippedVideosBuffer.indexOf(filename);
        if (existingIndex !== -1) {
            this.skippedVideosBuffer.splice(existingIndex, 1);
        }

        this.skippedVideosBuffer.push(filename);

        if (this.skippedVideosBuffer.length > this.SKIPPED_BUFFER_SIZE) {
            this.skippedVideosBuffer.shift();
        }
    }

    saveSessionOrderBatch() {
        if (this.sessionOrderUpdateTimer) {
            clearTimeout(this.sessionOrderUpdateTimer);
        }

        this.sessionOrderUpdateTimer = setTimeout(() => {
            this.telegramAuth.saveSessionOrder(this.currentSessionOrder);
        }, 2000);
    }

    updateLastVideoBatch(videoId) {
        if (this.lastVideoUpdateTimer) {
            clearTimeout(this.lastVideoUpdateTimer);
        }

        this.lastVideoUpdateTimer = setTimeout(() => {
            this.telegramAuth.updateLastVideo(videoId);
        }, 10000);
    }

    // ===============================
    // –£–ü–†–ê–í–õ–ï–ù–ò–ï –ü–†–û–°–ú–û–¢–†–ï–ù–ù–´–ú–ò –í–ò–î–ï–û
    // ===============================

    markAsWatched(filename) {
        this.watchedVideosSet.add(filename);

        const skipIndex = this.skippedVideosBuffer.indexOf(filename);
        if (skipIndex !== -1) {
            this.skippedVideosBuffer.splice(skipIndex, 1);
        }
    }

    isWatched(filename) {
        return this.watchedVideosSet.has(filename);
    }

    // ===============================
    // –û–ß–ò–°–¢–ö–ê
    // ===============================

    cleanup() {
        if (this.lastVideoUpdateTimer) {
            clearTimeout(this.lastVideoUpdateTimer);
        }

        if (this.sessionOrderUpdateTimer) {
            clearTimeout(this.sessionOrderUpdateTimer);
        }
    }
}